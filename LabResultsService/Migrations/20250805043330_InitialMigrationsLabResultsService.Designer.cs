// <auto-generated />
using System;
using LabResultsService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabResultsService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250805043330_InitialMigrationsLabResultsService")]
    partial class InitialMigrationsLabResultsService
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LabResultsService.Entities.LabOrder", b =>
                {
                    b.Property<Guid>("LabOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LabResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LabOrderId");

                    b.HasIndex("LabTestId");

                    b.ToTable("LabOrders", (string)null);
                });

            modelBuilder.Entity("LabResultsService.Entities.LabResult", b =>
                {
                    b.Property<Guid>("LabResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LabResultId");

                    b.HasIndex("LabOrderId")
                        .IsUnique();

                    b.ToTable("LabResults", (string)null);
                });

            modelBuilder.Entity("LabResultsService.Entities.LabTest", b =>
                {
                    b.Property<Guid>("LabTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceRange")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpecimenType")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LabTestId");

                    b.ToTable("LabTests", (string)null);
                });

            modelBuilder.Entity("LabResultsService.Entities.LabOrder", b =>
                {
                    b.HasOne("LabResultsService.Entities.LabTest", "LabTest")
                        .WithMany("LabOrders")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");
                });

            modelBuilder.Entity("LabResultsService.Entities.LabResult", b =>
                {
                    b.HasOne("LabResultsService.Entities.LabOrder", "LabOrder")
                        .WithOne("LabResult")
                        .HasForeignKey("LabResultsService.Entities.LabResult", "LabOrderId");

                    b.Navigation("LabOrder");
                });

            modelBuilder.Entity("LabResultsService.Entities.LabOrder", b =>
                {
                    b.Navigation("LabResult");
                });

            modelBuilder.Entity("LabResultsService.Entities.LabTest", b =>
                {
                    b.Navigation("LabOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
